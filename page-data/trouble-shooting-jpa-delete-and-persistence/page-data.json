{"componentChunkName":"component---src-templates-post-jsx","path":"/trouble-shooting-jpa-delete-and-persistence/","result":{"data":{"site":{"siteMetadata":{"title":"괜찮을지도"}},"markdownRemark":{"id":"50f61fc3-c2e2-5599-b7e8-64879a64275d","excerpt":"이 글은 우테코 괜찮을지도의 가 작성하였습니다. 삭제 기능에 대한 리팩터링 중, 회원 차단에 대한 기존 테스트가 실패해 이를 해결해야 했는데요. JPA에 대한 지식이 부족한 상태에서 삽질을 하며 알게 된 것들을 기록하고자 합니다. 문제 상황 1 : 쿼리의 발생 시점 찾기 도메인: 회원 차단 기능 도메인에 대해 먼저 설명드리겠습니다. 관리자 API에서 회원…","html":"<blockquote>\n<p>이 글은 우테코 괜찮을지도의 <code class=\"language-text\">도이</code>가 작성하였습니다.</p>\n</blockquote>\n<p>삭제 기능에 대한 리팩터링 중, 회원 차단에 대한 기존 테스트가 실패해 이를 해결해야 했는데요.<br>\nJPA에 대한 지식이 부족한 상태에서 삽질을 하며 알게 된 것들을 기록하고자 합니다.</p>\n<h2>문제 상황 1 : 쿼리의 발생 시점 찾기</h2>\n<h3>도메인: 회원 차단 기능</h3>\n<p>도메인에 대해 먼저 설명드리겠습니다.<br>\n관리자 API에서 회원을 차단하면, 차단한 회원의 지도 <code class=\"language-text\">Topic</code>, 핀 <code class=\"language-text\">Pin</code>, 핀 이미지 <code class=\"language-text\">PinImage</code>를 삭제 상태(soft delete)로 변경합니다.<br>\n그리고 매핑 테이블 역할을 하는 엔티티인 <code class=\"language-text\">Bookmark 즐겨찾기</code>, <code class=\"language-text\">Atlas 모아보기</code>, <code class=\"language-text\">Permission 권한</code>은 실제로 삭제(hard delete)합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blockMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token function\">findMemberById</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        member<span class=\"token punctuation\">.</span><span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BLOCKED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">deleteAllRelated</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllRelated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> pinIds <span class=\"token operator\">=</span> <span class=\"token function\">extractPinIdsByMember</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        atlasRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinImageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByPinIds</span><span class=\"token punctuation\">(</span>pinIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 동작하기를 기대했습니다.</p>\n<ol>\n<li>차단할 회원에 대한 정보 조회</li>\n<li>회원의 상태를 차단으로 변경하는 update 쿼리 발생</li>\n<li>매핑 테이블 엔티티들을 먼저 삭제해야 함, 이 때 delete 쿼리 발생</li>\n<li>주요 도메인 엔티티들을 삭제 상태로 변경하는 update 쿼리 발생</li>\n</ol>\n<h3>예상과 다른 영속 동작</h3>\n<p>테스트 코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Member를 차단(탈퇴시킬)할 경우, Member가 생성한 지도, 핀, 핀 이미지를 삭제 상태(soft delete)로 변경한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">blockMember_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//given</span>\n        <span class=\"token comment\">// ...    </span>\n        <span class=\"token comment\">// 객체 생성, 저장 및 기존 상태 검증 코드 생략</span>\n        <span class=\"token comment\">// ...</span>\n            \n        <span class=\"token comment\">//when</span>\n        adminCommandService<span class=\"token punctuation\">.</span><span class=\"token function\">blockMember</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//then</span>\n        <span class=\"token class-name\">Member</span> blockedMember <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertAll</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>blockedMember<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BLOCKED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 실패</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsByMemberIdAndTopicId</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 실패</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>atlasRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsByMemberIdAndTopicId</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 실패</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsByTopicIdAndMemberId</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 실패</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsById</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsById</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>pinImageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">existsById</span><span class=\"token punctuation\">(</span>pinImage<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 테스트가 실패해 로그를 보니, 실제 동작은 아래와 같았습니다. 😧😧</p>\n<ol>\n<li>차단할 회원에 대한 정보 조회</li>\n<li><del>회원의 상태를 차단으로 변경하는 update 쿼리 발생</del></li>\n<li><del>매핑 테이블 엔티티들을 먼저 삭제해야 함, 이 때 delete 쿼리 발생</del></li>\n<li>주요 도메인 엔티티들을 삭제 상태로 변경하는 update 쿼리 발생</li>\n</ol>\n<p><code class=\"language-text\">// when</code> 절의 코드를 호출한 뒤 entityManager로 flush, clear를 해주어도 마찬가지였습니다.  </p>\n<h2>원인</h2>\n<p>이전에는 잘 통과하던 테스트인데, 왜 갑자기 예상과 다르게 작동할까요?<br>\nJPA 영속성 컨텍스트의 쓰기 지연 때문이었습니다.  </p>\n<ol>\n<li>hard delete 메서드를 통해 해당 id를 가진 엔티티를 영속성 컨텍스트에서 제거한다.</li>\n<li>soft delete 메서드를 통해 update를 호출하면서, 연관된 엔티티들이 모두 영속화된다.<br>\n➡️ (1)에서 delete 해도, 2에서 조회할 때 함께 불러와지는 <code class=\"language-text\">member</code>, <code class=\"language-text\">permission</code>, <code class=\"language-text\">atlas</code>, <code class=\"language-text\">bookmark</code>까지 다시 영속화된다.   </li>\n<li>영속성 컨텍스트에는 <code class=\"language-text\">(차단 상태가 아닌)member</code>, <code class=\"language-text\">permission</code>, <code class=\"language-text\">atlas</code>, <code class=\"language-text\">bookmark</code>가 존재한다.</li>\n<li><code class=\"language-text\">blockMember()</code> 호출 후 flush를 할 때, 영속성 컨텍스트의 상태를 기준으로 쿼리가 발생한다.<br>\n➡️ member의 차단 상태에 대한 변경 감지도 되지 않고, delete 쿼리도 나가지 않는다.</li>\n</ol>\n<p>그래서 <code class=\"language-text\">blockMember()</code> 메서드를 호출한 뒤 flush를 해줘도 소용이 없었던 것입니다.  </p>\n<h2>해결</h2>\n<p>단순히 해결부터 해보자면,<br>\nsoft delete 메서드로 인한 영속화가 되기 이전에 flush해서 member의 변경, hard delete에 대한 쿼리를 발생시키면 됩니다.  </p>\n<h3>flush로 쿼리 발생 시점 조정하기</h3>\n<p>아래 처럼 서비스 단에서 해주거나, <code class=\"language-text\">@Modifying</code> 어노테이션을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllRelated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        atlasRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// flush!</span>\n        bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinImageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByPinIds</span><span class=\"token punctuation\">(</span>pinIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>문제 상황 2 : 테스트에서 발생하지 않는 일부 쿼리</h2>\n<p>그런데도 테스트는 성공하지 않았습니다. 🥲<br>\n<code class=\"language-text\">delete bookmark~</code> 쿼리는 여전히 발생하지 않고 있었습니다.  </p>\n<p>테스트 메서드와 <code class=\"language-text\">blockMember()</code>는 같은 트랜잭션으로 묶이기 때문에 <code class=\"language-text\">// when</code>절에서의 영속화 상태 때문일 것이라 짐작했습니다.<br>\n<code class=\"language-text\">bookmark</code>를 참조하는 <code class=\"language-text\">topic</code>, 또는 <code class=\"language-text\">member</code> 객체가 영속화되어있기 때문에 delete 쿼리가 나가지 않는 것이라 생각했습니다.  </p>\n<p>그래서 이에 대해서는 <code class=\"language-text\">blockMember()</code> 호출 전에 <code class=\"language-text\">testEntityManager.clear()</code>로 영속성 컨텍스트를 초기화해두는 것으로 해결했습니다.  </p>\n<p><strong>하지만 정확한 원인이 궁금했습니다.\n왜 <code class=\"language-text\">atlas</code>, <code class=\"language-text\">permission</code>은 삭제되고 <code class=\"language-text\">bookmark</code>만 삭제되지 않았을까요?</strong>  </p>\n<h2>원인</h2>\n<p>다른 매핑 테이블 엔티티들과 <code class=\"language-text\">bookmark</code>의 차이점을 살펴보았습니다.<br>\n해당 엔티티만이 <code class=\"language-text\">topic</code>과의 연관 관계에서 <code class=\"language-text\">CasecadeType.PERSIST</code>가 걸려 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token comment\">// Topic.class</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span> orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">></span></span> bookmarks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 메서드의 트랜잭션 내에서, 영속성 컨텍스트에 존재하는 <code class=\"language-text\">topic</code>에 <code class=\"language-text\">bookmark</code>가 살아있기 때문에<br>\n<code class=\"language-text\">PERSIST OPERATION</code>이 발생하고 <code class=\"language-text\">bookmark</code>에 대한 delete 쿼리는 무시됩니다.  </p>\n<blockquote>\n<p><a href=\"https://download.oracle.com/otndocs/jcp/persistence-2_2-mrel-eval-spec/index.html\">JPA 2.2 specification</a> 문서 3.2 장 Entity Instance's Life Cycle에 따르면,<br>\nflush가 발생할 때 <code class=\"language-text\">CascadeType.PERSIST</code>나 <code class=\"language-text\">CascadeType.ALL</code>이 있을 경우 자식에 연쇄적으로 <code class=\"language-text\">PERSIST OPERATION</code>이 발생합니다.\n<code class=\"language-text\">PERSIST OPERATION</code>은 연관 관계 매핑된 list의 엔티티에 대해 모두 이루어지며, 기존에 없던 값이면 새로 저장합니다.</p>\n</blockquote>\n<h2>해결</h2>\n<p>이에 대해서 엔티티에 걸어놓은 조건에 따라 정상적으로 동작하도록 하려면,<br>\n<code class=\"language-text\">bookmarkRepository</code>를 통해 delete 쿼리를 호출하는 대신 연관 관계를 제거하는 방식으로 삭제해주었어야 했던 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token comment\">// Topic.class</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeBookmarkBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>bookmark <span class=\"token operator\">-></span> bookmark<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">removeBookmark</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bookmarkCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// AdminCommandService.class</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllRelatedMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> pinIds <span class=\"token operator\">=</span> <span class=\"token function\">extractPinIdsByMember</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Long</span> memberId <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        atlasRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 변경된 부분</span>\n        topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findTopicsByBookmarksMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">-></span> topic<span class=\"token punctuation\">.</span><span class=\"token function\">removeBookmarkBy</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        atlasRepository<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinImageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByPinIds</span><span class=\"token punctuation\">(</span>pinIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 <code class=\"language-text\">bookmark</code>에 대한 삭제 로직을 수정하니,<br>\n테스트 코드에서 별도의 <code class=\"language-text\">clear</code>를 호출하지 않아도 잘 통과하는 것을 확인할 수 있었습니다.</p>\n<h2>결론</h2>\n<p>이번 삽질을 계기로 JPA를 잘 학습한 뒤 사용해야 한다는 교훈을 다시 한 번 몸소 느꼈습니다..  </p>\n<p>엔티티의 생명 주기에 대해 잘 이해하고 객체를 생성 및 삭제해야한다는 것, 삭제할 때에도 연관 관계의 관리가 중요하다는 것을 알았습니다.\n이처럼 예상하지 못한 동작을 피하기 위해 삭제 로직에서도 연관 관계 편의 메서드를 정의하는 방식으로 코드를 잘 작성할 필요가 있어 보입니다. </p>\n<h2>참고 자료</h2>\n<ul>\n<li><a href=\"https://velog.io/@jsb100800/spring-12\">[Spring boot] JPA Delete is not Working, 영속성와 연관 관계를 고려했는가.</a>  </li>\n<li><a href=\"https://joont92.github.io/jpa/CascadeType-PERSIST%EB%A5%BC-%ED%95%A8%EB%B6%80%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/\">[jpa] CascadeType.PERSIST를 함부로 사용하면 안되는 이유</a></li>\n</ul>","frontmatter":{"title":"JPA 엔티티를 삭제할 때 영속성과 연관 관계가 중요한 이유","date":"October 13, 2023","update":"October 13, 2023","tags":["Spring Data JPA","Hibernate","JPQL","트러블슈팅"],"series":null},"fields":{"slug":"/trouble-shooting-jpa-delete-and-persistence/","readingTime":{"minutes":8.945}}},"seriesList":{"edges":[{"node":{"id":"9e6463d2-18de-5fdf-b4e6-8707709710e1","fields":{"slug":"/how-to-write-a-post/"},"frontmatter":{"title":"포스트 작성 방법"}}},{"node":{"id":"b802f2fe-d332-504c-be84-fd7aa170c622","fields":{"slug":"/github-actions-ci-cd/"},"frontmatter":{"title":"GitHub Actions로 CI/CD 구축하기"}}},{"node":{"id":"45b7dc00-ae71-58e4-9dc2-7aff92f0ca0d","fields":{"slug":"/trouble-shooting-actions-runner/"},"frontmatter":{"title":"EC2 환경 변수 적용 및 Actions Runner에 환경 변수 적용이 안되는 이슈"}}},{"node":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","fields":{"slug":"/how-to-isolating-test/"},"frontmatter":{"title":"인수테스트에서 테스트 격리하기!"}}},{"node":{"id":"fa602b8b-64fa-59b0-b377-089612f91d9f","fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}}},{"node":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","fields":{"slug":"/trouble-shooting-modifying-annotation/"},"frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제"}}},{"node":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","fields":{"slug":"/trouble-shooting-fetch-type/"},"frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!"}}},{"node":{"id":"2b3c31ce-d59e-50a0-92b2-7dc228aacf29","fields":{"slug":"/jpa-multibag-fetch-exception/"},"frontmatter":{"title":"Fetch join 사용 시 MultipleBagFetchException의 발생 이유와 해결 방법"}}},{"node":{"id":"253d110b-e241-549e-923a-f26782aab2dc","fields":{"slug":"/how-to-hikariCP/"},"frontmatter":{"title":"HikariCP 적용기"}}},{"node":{"id":"50f61fc3-c2e2-5599-b7e8-64879a64275d","fields":{"slug":"/trouble-shooting-jpa-delete-and-persistence/"},"frontmatter":{"title":"JPA 엔티티를 삭제할 때 영속성과 연관 관계가 중요한 이유"}}}]},"previous":{"fields":{"slug":"/how-to-hikariCP/"},"frontmatter":{"title":"HikariCP 적용기"}},"next":null},"pageContext":{"id":"50f61fc3-c2e2-5599-b7e8-64879a64275d","series":null,"previousPostId":"253d110b-e241-549e-923a-f26782aab2dc","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}