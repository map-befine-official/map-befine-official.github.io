{"componentChunkName":"component---src-templates-post-jsx","path":"/how-to-isolating-test/","result":{"data":{"site":{"siteMetadata":{"title":"괜찮을지도"}},"markdownRemark":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","excerpt":"이 글은 우아한테크코스 괜찮을지도팀의 가 작성했습니다I 테스트 간 격리.. 왜 필요할까? 우리는 프로덕션 코드의 신뢰성을 보장하기 위해서 테스트 코드를 작성한다. 그렇기 때문에, 테스트 코드는 100번을 실행시키던 100만번을 실행시키던, 동일한 결과를 내뱉어야한다. 테스트 코드를 아무리 잘 작성하더라도, 매번 테스트의 결과가 다르다면 의미가 없다. 예를…","html":"<blockquote>\n<p>이 글은 우아한테크코스 괜찮을지도팀의 <code class=\"language-text\">매튜</code>가 작성했습니다I</p>\n</blockquote>\n<h2>테스트 간 격리.. 왜 필요할까?</h2>\n<p>우리는 프로덕션 코드의 신뢰성을 보장하기 위해서 테스트 코드를 작성한다.</p>\n<p>그렇기 때문에, 테스트 코드는 100번을 실행시키던 100만번을 실행시키던, 동일한 결과를 내뱉어야한다.</p>\n<p>테스트 코드를 아무리 잘 작성하더라도, 매번 테스트의 결과가 다르다면 의미가 없다.</p>\n<p>예를 들어 아래와 같은 테스트가 있다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token punctuation\">{</span>  \n\n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PinRepository</span> pinRepository<span class=\"token punctuation\">;</span>  \n      \n    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token keyword\">void</span> 모든_핀을_조회한다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// given  </span>\n        <span class=\"token class-name\">Pin</span> pin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          \n        <span class=\"token comment\">// when  </span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pin</span><span class=\"token punctuation\">></span></span> pins <span class=\"token operator\">=</span> pinRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">// then  </span>\n        <span class=\"token function\">assertAll</span><span class=\"token punctuation\">(</span>  \n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>pins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>pins<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정상적인 경우라면, 위 테스트는 통과해야한다.</p>\n<p>하지만, 테스트 간 격리를 진행하지 않은 상태에서 이 테스트 이전에 다른 테스트에서 pin 을 저장하는 동작을 수행했고, 데이터를 지워주지 않았다면?</p>\n<p>해당 테스트는 실패하게 될 것이다.</p>\n<p>위 테스트는 이전에 수행된 테스트들의 동작에도 영향을 받는, 독립적이지 못한 테스트가 된 것이다.</p>\n<p>이것이 바로 테스트 간 격리가 필요한 이유이다.</p>\n<p>그렇다면 위와 같은 상황을 @Transactional 어노테이션만으로 완벽하게 예방할 수 있을까?</p>\n<p>결론부터 말하자면 그럴 수 없다.</p>\n<p>@SpringBootTest 를 사용하는 인수테스트 같은 경우는 Port 를 지정하여 서버를 띄우게 되는데, 이 때 HTTP 클라이언트와 서버는 각기 다른 스레드에서 실행되게 된다.</p>\n<p>그렇기 때문에 테스트 코드에 @Transactional 있더라도 호출되는 쪽은 다른 스레드에서 새로운 트랜잭션을 커밋하기 때문에, 롤백 전략은 무색해지게 되고, 테스트 간 격리도 제대로 이행될 수가 없는 것이다.</p>\n<h2>그렇다면 격리를 위해 사용할 수 있는 방법들은 무엇이 있을까?</h2>\n<p>이번 포스트를 통해서 다뤄볼 방법은 3가지이다.</p>\n<p>바로 <code class=\"language-text\">Dirtiest Context</code>,  <code class=\"language-text\">@Sql 어노테이션</code>, <code class=\"language-text\">Entity Manager</code> 이다.</p>\n<p>하나씩 짚어보면서 넘어가보자.</p>\n<h3>DirtiesContext</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DirtiesContext</span><span class=\"token punctuation\">(</span>classMode <span class=\"token operator\">=</span> <span class=\"token class-name\">DirtiesContext<span class=\"token punctuation\">.</span>ClassMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BEFORE_EACH_TEST_METHOD</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RANDOM_PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">DiriesContext</code> 는 현재 테스트를 실행하고자 하는 컨텍스트에 빈이 로드되어 있으면 Dirties 를 확인하고 Bean 들을 Reload 하게 된다.</p>\n<p>즉, 테이블도 다시 만들기 때문에 테스트 간의 격리가 가능하다.</p>\n<p>하지만, 매번 테스트하기 이전에 컨텍스트를 Reload 하게 된다면, 테스트 시간은 한없이 길어지게 될 것이기 때문이다.</p>\n<p>테스트의 장점은 프로덕션 코드의 신뢰성을 보장함에도 존재하지만, 개발자가 개발을 진행중에 코드를 올바르게 작성중인지 바로 바로 응답받기 위한 수단이기도 하다.</p>\n<p>따라서, 응답 속도는 개발 진행 속도와 크게 연관되어 있는 것이다.</p>\n<p>하지만, 인수테스트에 DirtiesContext 를 난사하게 되면, 매 테스트 실행마다 속이 터지는 경험을 하게 될 것이다.</p>\n<h3>@Sql 어노테이션</h3>\n<p>해당 방법은 꽤나 획기적인 방법이다.</p>\n<p>간단한 sql 구문만으로 테스트 간의 격리를 이뤄낼 수 있다. </p>\n<p>어떤 이는 외래키 제약 조건으로 인해 한번에 데이터를 삭제하는 것이 불가능하다고 생각할 수도 있지만, 아래 코드와 같이 외래키 제약 조건을 해제해주고 데이터를 삭제하는 것이 가능하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">TRUNCATE</span> <span class=\"token keyword\">TABLE</span> 테이블이름<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/truncate.sql\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 해당 방법에도 단점은 존재한다.</p>\n<p>바로, 테이블이 추가될 때마다, 해당 sql 구문을 수정해주어야 한다는 것이다.</p>\n<p>큰 단점은 아니지만, 항상 신경써주어야 한다는 점에서 조금은 아쉽다는 생각이 든다. </p>\n<h3>Entity Manager</h3>\n<p>위에서도 언급하였듯 <code class=\"language-text\">@Sql</code> 어노테이션은 정말 강력하지만, 테이블이 추가될 때마다 sql 구문을 다시 수정해주어야 한다는 단점이 존재했다.</p>\n<p>이 때, <code class=\"language-text\">@Sql</code> 어노테이션의 장점을 모두 가져가면서, 위에서 언급한 단점도 보완할 수 있는 방법이 있다.</p>\n<p>바로 <code class=\"language-text\">Entity Manager</code> 를 활용하는 방법이다.</p>\n<p>도대체 어떻게? <code class=\"language-text\">Entity Manager</code> 를 통해서 Data 를 지운다는 것일까?</p>\n<p>우리는 개발자이니 코드를 통해 살펴보자. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Componenet</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseCleanup</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">UNDERSCORE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token annotation punctuation\">@PersistenceContext</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tableNames<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        tableNames <span class=\"token operator\">=</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">getMetamodel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEntities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>entityType <span class=\"token operator\">-></span> entityType<span class=\"token punctuation\">.</span><span class=\"token function\">getJavaType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>entityType <span class=\"token operator\">-></span> <span class=\"token function\">convertTableNameFromCamelCaseToSnakeCase</span><span class=\"token punctuation\">(</span>entityType<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">convertTableNameFromCamelCaseToSnakeCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tableName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">StringBuilder</span> tableNameSnake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> letter <span class=\"token operator\">:</span> tableName<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">addUnderScoreForCapitalLetter</span><span class=\"token punctuation\">(</span>tableNameSnake<span class=\"token punctuation\">,</span> letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            tableNameSnake<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token keyword\">return</span> tableNameSnake<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUnderScoreForCapitalLetter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> tableNameSnake<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> letter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">isUpperCase</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            tableNameSnake<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UNDERSCORE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entity Manager 를 통해 데이터를 관리하기 위해 DatabaseCleanup 이라는 객체를 생성해줬다.</p>\n<p><code class=\"language-text\">InitializingBean</code> 을 implements 해 <code class=\"language-text\">afterPropertiesSet</code> 메서드를 구현하게되면, 프로퍼티가 모두 초기화되었을 때, BeanFactory에 의해 자동으로 해당 메서드가 호출되게 된다.</p>\n<p>그러니, 해당 메서드의 내부 구현으로 Entity 들의 ClassName 을 이용하여 모든 테이블명을 생성해내어 저장하면 된다. (Entity Class 명을 Camel Case -> Snake Case 로 변환해준다. <code class=\"language-text\">convertTableNameFromCamelCaseToSnakeCase</code> 가 해당 동작을 수행해주고 있다.)</p>\n<p>위와 같이 모든 테이블명을 생성해내어 저장했다면, 해당 테이블 명들을 이용하여 Data 를 모두 지워주는 execute 를 구현해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseCleanup</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SET_REFERENTIAL_INTEGRITY_SQL_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SET REFERENTIAL_INTEGRITY %s\"</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TRUNCATE_SQL_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"TRUNCATE TABLE %s\"</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">ID_RESET_SQL_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ALTER TABLE %s ALTER COLUMN ID RESTART WITH 1\"</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@PersistenceContext</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tableNames<span class=\"token punctuation\">;</span>  \n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\t<span class=\"token annotation punctuation\">@Transactional</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t    entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNativeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_REFERENTIAL_INTEGRITY_SQL_MESSAGE</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tableName <span class=\"token operator\">:</span> tableNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNativeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TRUNCATE_SQL_MESSAGE</span><span class=\"token punctuation\">,</span> tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNativeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID_RESET_SQL_MESSAGE</span><span class=\"token punctuation\">,</span> tableName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t  \n\t    entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNativeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_REFERENTIAL_INTEGRITY_SQL_MESSAGE</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n\t  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 순서대로 간단하게 설명해보자면</p>\n<ol>\n<li>외래키 제약조건을 비활성화 해준다. </li>\n<li><code class=\"language-text\">afterPropertiesSet</code> 을 통해 생성해놓은 모든 테이블 명들을 이용하여 Data 들을 모두 Truncate 해주고, ID 값을 다시 세팅해준다.</li>\n<li>외래키 제약조건을 활성화해준다. </li>\n</ol>\n<p>이런 Flow 로 흘러가는 execute 메서드를 구현해주었다면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RANDOM_PORT</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@LocalServerPort</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DatabaseCleanup</span> databaseCleanup<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@BeforeEach</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@AfterEach</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        databaseCleanup<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드와 같이 @AfterEach 를 통해 매 인수테스트 동작 이후 실행시켜주면, 모든 테스트들을 격리할 수 있게 되는 것이다.</p>\n<h2>결론</h2>\n<p>지금으로서는 데이터 삭제가 쉽고, 테이블이 추가되었을 때 sql 구문을 수정하지 않아도 되는 <code class=\"language-text\">Entity Manager</code> 를 통해 테스트를 격리하는 것이 최선의 방법으로 보인다.</p>\n<p>하지만, 추후에 이보다 더 좋은 방법을 발견하면, 면밀히 검토해보고 바꿀 의사가 충분하다고 생각한다.</p>\n<h2>참고</h2>\n<p><a href=\"https://tecoble.techcourse.co.kr/post/2020-09-15-test-isolation/\">https://tecoble.techcourse.co.kr/post/2020-09-15-test-isolation/</a></p>","frontmatter":{"title":"인수테스트에서 테스트 격리하기!","date":"July 31, 2023","update":"July 31, 2023","tags":["테스트","데이터베이스"],"series":null},"fields":{"slug":"/how-to-isolating-test/","readingTime":{"minutes":9.46}}},"seriesList":{"edges":[{"node":{"id":"9e6463d2-18de-5fdf-b4e6-8707709710e1","fields":{"slug":"/how-to-write-a-post/"},"frontmatter":{"title":"포스트 작성 방법"}}},{"node":{"id":"b802f2fe-d332-504c-be84-fd7aa170c622","fields":{"slug":"/github-actions-ci-cd/"},"frontmatter":{"title":"GitHub Actions로 CI/CD 구축하기"}}},{"node":{"id":"45b7dc00-ae71-58e4-9dc2-7aff92f0ca0d","fields":{"slug":"/trouble-shooting-actions-runner/"},"frontmatter":{"title":"EC2 환경 변수 적용 및 Actions Runner에 환경 변수 적용이 안되는 이슈"}}},{"node":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","fields":{"slug":"/how-to-isolating-test/"},"frontmatter":{"title":"인수테스트에서 테스트 격리하기!"}}},{"node":{"id":"fa602b8b-64fa-59b0-b377-089612f91d9f","fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}}},{"node":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","fields":{"slug":"/trouble-shooting-modifying-annotation/"},"frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제"}}},{"node":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","fields":{"slug":"/trouble-shooting-fetch-type/"},"frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!"}}},{"node":{"id":"2b3c31ce-d59e-50a0-92b2-7dc228aacf29","fields":{"slug":"/jpa-multibag-fetch-exception/"},"frontmatter":{"title":"Fetch join 사용 시 MultipleBagFetchException의 발생 이유와 해결 방법"}}},{"node":{"id":"253d110b-e241-549e-923a-f26782aab2dc","fields":{"slug":"/how-to-hikariCP/"},"frontmatter":{"title":"HikariCP 적용기"}}}]},"previous":{"fields":{"slug":"/trouble-shooting-actions-runner/"},"frontmatter":{"title":"EC2 환경 변수 적용 및 Actions Runner에 환경 변수 적용이 안되는 이슈"}},"next":{"fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}}},"pageContext":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","series":null,"previousPostId":"45b7dc00-ae71-58e4-9dc2-7aff92f0ca0d","nextPostId":"fa602b8b-64fa-59b0-b377-089612f91d9f"}},"staticQueryHashes":[],"slicesMap":{}}