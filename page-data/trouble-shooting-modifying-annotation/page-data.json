{"componentChunkName":"component---src-templates-post-jsx","path":"/trouble-shooting-modifying-annotation/","result":{"data":{"site":{"siteMetadata":{"title":"괜찮을지도"}},"markdownRemark":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","excerpt":"이 글은 우테코 괜찮을지도의 가 작성하였습니다. 배경 괜찮을지도 서비스에서는 테스트를  방식으로 수행하고 있습니다.\n란 우리가 알고 있는  테스트에서 따온 네이밍입니다. (서비스 -> 레포지토리까지의 테스트만으로도 E2E라고 불리는지는 잘 모르겠습니다)\n 이때, Layer는 각 계층(Service, Repo 등)을 말합니다. 서비스 계층에서 데이터를 삭제…","html":"<blockquote>\n<p>이 글은 우테코 괜찮을지도의 <code class=\"language-text\">쥬니</code>가 작성하였습니다.</p>\n</blockquote>\n<h3>배경</h3>\n<p>괜찮을지도 서비스에서는 테스트를 <code class=\"language-text\">Layer To End</code> 방식으로 수행하고 있습니다.<br>\n<code class=\"language-text\">Layer To End</code>란 우리가 알고 있는 <code class=\"language-text\">E2E</code> 테스트에서 따온 네이밍입니다. (서비스 -> 레포지토리까지의 테스트만으로도 E2E라고 불리는지는 잘 모르겠습니다)\n<br> 이때, Layer는 각 계층(Service, Repo 등)을 말합니다.</p>\n<p>서비스 계층에서 데이터를 삭제하는 테스트를 수행하는 도중, 데이터가 삭제되지 않고 조회되는 문제가 발생하였습니다.\n<br> 지금부터, 그 이야기를 시작해 보려 합니다.</p>\n<h3>문제 상황</h3>\n<p>문제를 직면한 상황은 <code class=\"language-text\">사용자의 즐겨찾기 목록을 모두 삭제하는 상황</code>이었습니다.\n<br> 테스트를 위해, 각 Repositry를 사용하여 아래와 같이 데이터를 넣어주는 작업을 수행했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"즐겨찾기 목록에 있는 모든 토픽을 삭제할 수 있다\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllBookmarks_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 회원 저장</span>\n            <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"member@naver.com\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Role</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\">Topic</span> topic1 <span class=\"token operator\">=</span> <span class=\"token class-name\">TopicFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPrivateAndGroupOnlyTopic</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Topic</span> topic2 <span class=\"token operator\">=</span> <span class=\"token class-name\">TopicFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPrivateAndGroupOnlyTopic</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 지도 저장</span>\n            topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>topic1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>topic2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\">Bookmark</span> bookmark1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithAssociatedTopicAndMember</span><span class=\"token punctuation\">(</span>topic1<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Bookmark</span> bookmark2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithAssociatedTopicAndMember</span><span class=\"token punctuation\">(</span>topic2<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 즐겨찾기 등록</span>\n            bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>bookmark1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>bookmark2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드의 결과로, 사용자(Member)와 지도(Topic)가 생성되어 있을 것이고, 사용자는 자신이 만든 지도를 즐겨찾기(Bookmark)로 등록해 놓은 상황일 것입니다.\n<br> 이후, 아래와 같은 코드를 수행하면 해당 사용자의 즐겨찾기 목록이 전부 삭제되어, 테스트를 통과할 것이라 예상하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">        <span class=\"token comment\">// 생략 ...</span>\n        \n        <span class=\"token comment\">// 통과 !</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>creatorBefore<span class=\"token punctuation\">.</span><span class=\"token function\">getBookmarks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 해당 회원의 즐겨찾기 목록 전체 삭제</span>\n        <span class=\"token class-name\">AuthMember</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">MemberFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>creatorBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bookmarkCommandService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllBookmarks</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 실패 !</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>bookmarkRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>creatorBefore<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 실패 메시지는 아래와 같았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>AssertionError</span><span class=\"token operator\">:</span> \n<span class=\"token class-name\">Expecting</span> empty but was<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mapbefine<span class=\"token punctuation\">.</span>mapbefine<span class=\"token punctuation\">.</span>bookmark<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span>Bookmark</span><span class=\"token annotation punctuation\">@23504729</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mapbefine<span class=\"token punctuation\">.</span>mapbefine<span class=\"token punctuation\">.</span>bookmark<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span>Bookmark</span><span class=\"token annotation punctuation\">@2447e2e</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>즉, 즐겨찾기가 존재하지 않을 것이라고 예상하였지만, 데이터가 존재한다는 의미였습니다.\n<br> 테스트에 사용된 메서드들의 로직적인 오류를 재차 확인하였지만, 발견할 수 없었습니다.\n<br> 그렇다면, 도대체 왜 데이터가 삭제되지 않고 조회되는 것일까요 ?</p>\n<h3>원인 파악</h3>\n<p>위 문제의 원인을 찾기 위해 여러 방법을 시도하던 중, <code class=\"language-text\">TestEntityManager</code>를 통해 즐겨찾기 삭제 메서드 호출 전, 후에 다음과 같은 로직을 추가하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"즐겨찾기 목록에 있는 모든 토픽을 삭제할 수 있다\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllBookmarks_Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략</span>\n        testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bookmarkCommandService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAllBookmarks</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, 삭제 메서드를 호출한 뒤, 명시적으로 영속성 컨텍스트를 flush &#x26; clear 해준 것입니다.\n<br> 위와 같은 로직을 추가하자, 테스트가 성공적으로 통과했습니다.\n<br> 이로써, 문제 원인은 영속성 컨텍스트와 관련이 있음을 알게 되었습니다.</p>\n<p>하지만, 한 가지 의문점이 생겼습니다.\n<br> 분명, 우리는 데이터의 변경이 일어나는 <code class=\"language-text\">Repository</code>의 메서드에는 <code class=\"language-text\">@Modifying</code> 어노테이션과 함께, <code class=\"language-text\">clearAutomatically = true</code>로 설정해 둔 상태였습니다.\n<br> 테스트에서 직면한 문제처럼, 데이터를 수정(삭제)하였더라도 1차 캐시 내부에서는 수정 전 데이터가 존재할 수 있음을 인지하고 있었습니다.\n<br> 이로인해, 수정 관련 쿼리가 실행된 후, 명시적으로 영속성 컨텍스트를 비워주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookmarkRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Modifying</span><span class=\"token punctuation\">(</span>clearAutomatically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 설정을 해두었음에도 불구하고, 영속성 컨텍스트가 비워지지 않았다는 사실을 납득하기 어려웠습니다.\n하지만, 그 원인은 생각보다 쉽게 찾을 수 있었습니다.\n우리가 사용한 <code class=\"language-text\">@Modifying</code> 어노테이션을 확인해 보니, 다음과같이 쓰여있었습니다.</p>\n<blockquote>\n<p>Indicates a query method should be considered as modifying query as that changes the way it needs to be executed. <br>\n<strong>This annotation is only considered if used on query methods defined through a {@link Query} annotation.</strong><br> It's not\napplied on custom implementation methods or queries derived from the method name as they already have control over\nthe underlying data access APIs or specify if they are modifying by their name.</p>\n</blockquote>\n<p>우리가 주목할 점은, 위 설명의 두 번째 줄이었습니다.\n<br> 간단하게 설명하자면, <code class=\"language-text\">@Modifying</code> 어노테이션은 <code class=\"language-text\">@Query</code> 어노테이션과 함께 사용될 때만 효력이 있다는 것입니다.\n<br> 즉, 아래와 같은 <code class=\"language-text\">NamedQeury</code>를 사용할 때는 옵션값을 넣어주더라도 동작하지 않았던 것이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookmarkRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Modifying</span><span class=\"token punctuation\">(</span>clearAutomatically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>문제 해결</h3>\n<p>(1) <code class=\"language-text\">@Query</code> 어노테이션을 사용하여 직접 쿼리를 작성하는 방법과, (2) 테스트 코드에서 flush &#x26; clear를 명시적으로 수행하는 방법이 있었습니다.\n<br> 단순히 테스트 통과에 목적을 둔 것이 아니기 때문에, 실제 프로덕트 코드에서도 예상치 못한 동작을 방지하기 위해 (1)번 방법을 선택하였습니다.\n<br> 이에 따라, <code class=\"language-text\">Named Query -> JPQL</code>로 변경함으로써 문제를 해결할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookmarkRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Modifying</span><span class=\"token punctuation\">(</span>clearAutomatically <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from Bookmark b where b.member.id = :memberId\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAllByMemberId</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"memberId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제","date":"October 02, 2023","update":"October 02, 2023","tags":["Spring Data JPA","Test","@Modifying"],"series":null},"fields":{"slug":"/trouble-shooting-modifying-annotation/","readingTime":{"minutes":7.12}}},"seriesList":{"edges":[{"node":{"id":"9e6463d2-18de-5fdf-b4e6-8707709710e1","fields":{"slug":"/how-to-write-a-post/"},"frontmatter":{"title":"포스트 작성 방법"}}},{"node":{"id":"b802f2fe-d332-504c-be84-fd7aa170c622","fields":{"slug":"/github-actions-ci-cd/"},"frontmatter":{"title":"GitHub Actions로 CI/CD 구축하기"}}},{"node":{"id":"45b7dc00-ae71-58e4-9dc2-7aff92f0ca0d","fields":{"slug":"/trouble-shooting-actions-runner/"},"frontmatter":{"title":"EC2 환경 변수 적용 및 Actions Runner에 환경 변수 적용이 안되는 이슈"}}},{"node":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","fields":{"slug":"/how-to-isolating-test/"},"frontmatter":{"title":"인수테스트에서 테스트 격리하기!"}}},{"node":{"id":"fa602b8b-64fa-59b0-b377-089612f91d9f","fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}}},{"node":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","fields":{"slug":"/trouble-shooting-modifying-annotation/"},"frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제"}}},{"node":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","fields":{"slug":"/trouble-shooting-fetch-type/"},"frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!"}}}]},"previous":{"fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}},"next":{"fields":{"slug":"/trouble-shooting-fetch-type/"},"frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!"}}},"pageContext":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","series":null,"previousPostId":"fa602b8b-64fa-59b0-b377-089612f91d9f","nextPostId":"db91695e-5bf6-554c-bafd-e161d686fadf"}},"staticQueryHashes":[],"slicesMap":{}}