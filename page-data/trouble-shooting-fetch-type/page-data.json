{"componentChunkName":"component---src-templates-post-jsx","path":"/trouble-shooting-fetch-type/","result":{"data":{"site":{"siteMetadata":{"title":"괜찮을지도"}},"markdownRemark":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","excerpt":"이 글은 우테코 괜찮을지도의 가 작성하였습니다. 배경 쿼리 개선... 필요할지도? 9월 말, 추석을 앞두고 사용자 유치 계획 실행을 앞두고 있었다. 우리는 행복회로를 돌리며, 많은 사용자들이 서비스에 들어올 것이라고 생각했고, 사용자들에게 좋은 경험을 선사하고 싶었다. 하지만, 문제가 있었다. 많은 사용자가 들어옴에 따라 평소보다 많은 트래픽이 발생할 것…","html":"<blockquote>\n<p>이 글은 우테코 괜찮을지도의 <code class=\"language-text\">매튜</code>가 작성하였습니다.</p>\n</blockquote>\n<h2>배경</h2>\n<h3>쿼리 개선... 필요할지도?</h3>\n<p>9월 말, 추석을 앞두고 사용자 유치 계획 실행을 앞두고 있었다.</p>\n<p>우리는 행복회로를 돌리며, 많은 사용자들이 서비스에 들어올 것이라고 생각했고, 사용자들에게 좋은 경험을 선사하고 싶었다.</p>\n<p>하지만, 문제가 있었다.</p>\n<p>많은 사용자가 들어옴에 따라 평소보다 많은 트래픽이 발생할 것이고, 조금 더 좋은 경험을 제공하기 위해 추가한 지도와 핀으로 인해 데이터는 방대해졌다. </p>\n<p>자칫하면 사용자에게 좋지 않은 경험을 선사할 수 있다는 생각에 성능 개선을 목표로 삼았다.</p>\n<p>때문에 우리는 현재 발생하고 있는 <code class=\"language-text\">N + 1</code> 문제를 해결하고, <code class=\"language-text\">인덱스</code>를 활용하여 빠른 성능 개선을 계획했다.</p>\n<p>그 중에서 <code class=\"language-text\">N + 1</code> 문제를 해결하는 과정 중에 해당 글을 작성하게 된 문제가 발생하였다.</p>\n<h3>문제 상황</h3>\n<p>유저가 <code class=\"language-text\">지도</code> 목록을 조회하려는 경우 비정상적으로 쿼리가 많이나갔다.</p>\n<p>쉽게 예상할 수 있듯 당연히 <code class=\"language-text\">N + 1</code> 문제였다.</p>\n<p>우리는 해당 <code class=\"language-text\">N + 1</code> 문제를 해결하기 위해서 <code class=\"language-text\">fetch join</code> 을 사용했다.</p>\n<h3>N + 1 을 해결해보자!</h3>\n<ul>\n<li>\n<p>Topic Entity 구조 (<code class=\"language-text\">지도 == Topic</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>  \n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Getter</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Topic</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseTimeEntity</span> <span class=\"token punctuation\">{</span>  \n\n<span class=\"token annotation punctuation\">@Id</span>  \n<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 생략\n\n<span class=\"token annotation punctuation\">@ManyToOne</span>  \n<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> creator<span class=\"token punctuation\">;</span>  \n\n<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Permission</span><span class=\"token punctuation\">></span></span> permissions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pin</span><span class=\"token punctuation\">></span></span> pins <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span> orphanRemoval <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bookmark</span><span class=\"token punctuation\">></span></span> bookmarks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@ColumnDefault</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> pinCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@ColumnDefault</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> bookmarkCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 생략</code></pre></div>\n</li>\n</ul>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Topic Repository \n```java\n@Repository  \npublic interface TopicRepository extends JpaRepository&lt;Topic, Long> {  \n  \n    @EntityGraph(attributePaths = {\"permissions\"})  \n    List&lt;Topic> findAll();\n\n\t... 생략\n}</code></pre></div>\n<p>앞선 <code class=\"language-text\">Entity</code>, <code class=\"language-text\">Repository</code> 는 <code class=\"language-text\">지도</code> 목록을 조회할 때 사용된 <code class=\"language-text\">Entity</code> 및 <code class=\"language-text\">Repository</code> 이다.</p>\n<p>마지막으로 <code class=\"language-text\">Topic</code> 에 필요한 정보는 아래와 같다.</p>\n<ul>\n<li>\n<p>Topic Response</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>  \n<span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"토픽 이름\"</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"image\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"토픽 이미지 링크\"</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"creator\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"토픽을 만든자\"</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"pinCount\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"bookmarkCount\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  \n<span class=\"token property\">\"updatedAt\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"2023-10-02T18:00:55.95188832\"</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>여기서 사용자에게 <code class=\"language-text\">Topic</code> 목록을 제공하기 위해 부수적으로 필요한 <code class=\"language-text\">Entity</code> 는 <code class=\"language-text\">Member</code> , <code class=\"language-text\">Permission</code> 이었다.</p>\n<p>위에서 볼 수 있듯, <code class=\"language-text\">Member</code> 는 <code class=\"language-text\">@ManyToOne 기본 fetch 설정</code>으로 인해 <code class=\"language-text\">FetchType.EAGER</code> 로 설정되고, <code class=\"language-text\">Permission</code> 은 <code class=\"language-text\">@OneToMany 기본 fetch 설정</code> 인 <code class=\"language-text\">FetchType.LAZY</code> 이지만, <code class=\"language-text\">@EntityGraph</code> 를 통해서 <code class=\"language-text\">fetch join</code> 을 해주었기 때문에 당연히 쿼리는 한번만 나갈 줄 알았다.</p>\n<p>하지만, 결과는....</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 데이터 10만개를 기준으로 진행되었음\n[http-nio-8080-exec-2] 16496 INFO  com.mapbefine.mapbefine.common.filter.LatencyLoggingFilter - Latency : 4.649s, Query count : 8, Request URI : /topics</code></pre></div>\n<p>위와 같았고, 우리는 멘붕이 올 수 밖에 없었다.</p>\n<p>우리 예상대로라면 분명히 <code class=\"language-text\">Query Count</code> 가 <code class=\"language-text\">1</code>이어야 하는데??</p>\n<p>도대체 왜 ?? ㅠㅠㅠ</p>\n<h3>해결했는데 이유를 모르겠어</h3>\n<p>다른 문제들도 많은데, 해당 문제까지 발생하여 몇 시간 동안 골머리를 앓았다.</p>\n<p>그러다 조금의 시간이 흘렀고, 마음을 가다듬고 천천히 쿼리를 뜯어보기 시작했고, 원인을 찾을 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        topic t1_0 \n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n        permission p1_0 \n            <span class=\"token keyword\">on</span> t1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>p1_0<span class=\"token punctuation\">.</span>topic_id\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        member m1_0 \n    <span class=\"token keyword\">where</span>\n        m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">7</span> 번을 member 를 찾아옴</code></pre></div>\n<p>우리는 <code class=\"language-text\">@ManyToOne</code> 의 <code class=\"language-text\">기본 fetch 설정</code>인 <code class=\"language-text\">FetchType.EAGER</code> 로 인해 <code class=\"language-text\">Member</code> 를 <code class=\"language-text\">join</code> 을 통해 가져올 것이라고 생각했지만, 실상은 <code class=\"language-text\">Topic</code> 을 가져올 때 <code class=\"language-text\">permission</code> 은 <code class=\"language-text\">join</code>을 잘해서 가져오지만, <code class=\"language-text\">member</code> 는 <code class=\"language-text\">select 쿼리</code>를 통해 따로 가져오고 있었다.</p>\n<p>이로 인해서 <code class=\"language-text\">Query Count</code> 가 <code class=\"language-text\">1</code>이 아니었던 것이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EntityGraph</span><span class=\"token punctuation\">(</span>attributePaths <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"creator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"permissions\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topic</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 문제를 해결하기 위해, 위와 같이 <code class=\"language-text\">attributePaths</code> 에 <code class=\"language-text\">creator</code> 를 추가해주었더니</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[http-nio-8080-exec-5] 16826 INFO  com.mapbefine.mapbefine.common.filter.LatencyLoggingFilter - Latency : 5.941s, Query count : 1, Request URI : /topics</code></pre></div>\n<p>드디어 <code class=\"language-text\">Query Count</code> 를 <code class=\"language-text\">1</code>로 만들 수 있었다.</p>\n<p>도대체 왜 그런걸까???</p>\n<p>차근차근 알아가보자!</p>\n<h2>ManyToOne 테스트</h2>\n<h3>테스트를 통해서 생각을 굳혀보자!</h3>\n<p>일단 이전 상황들로 미루어 보았을 때, <code class=\"language-text\">Eager</code> 와 <code class=\"language-text\">Lazy</code> 는 단순 <code class=\"language-text\">select 시기</code>를 <code class=\"language-text\">결정</code>하는 것 같다.</p>\n<p>그렇기 때문에, <code class=\"language-text\">Eager</code> 로 설정하든 <code class=\"language-text\">Lazy</code> 로 설정하든, 따로 <code class=\"language-text\">select</code> 쿼리를 통해서 가져오는 것이다.</p>\n<p>이를 증명하기 위해 몇 가지 테스트를 진행해보자.</p>\n<p><code class=\"language-text\">@ManyToOne</code> 을 진행하기 위해 <code class=\"language-text\">대상 Entity</code> 를 정하고 <code class=\"language-text\">Test</code> 하기 위한 <code class=\"language-text\">테스트 코드</code>를 짜보자!</p>\n<ul>\n<li>Permission (@ManyToOne 컬럼밖에 없어서 딱 테스트하기 좋은 Entity Class 라고 판단)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>  \n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Getter</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Permission</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseTimeEntity</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Id</span>  \n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@ManyToOne</span> <span class=\"token comment\">// 여기서 Eager or Lazy 로 진행할 것 </span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_id\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Topic</span> topic<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@ManyToOne</span>  \n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ManyToOne 을 테스트 하기 위한 테스트 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ServiceTest</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TopicRepository</span> topicRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PermissionRepository</span> permissionRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestEntityManager</span> testEntityManager<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Topic</span> topic<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Permission</span> permission<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@BeforeEach</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// 멤버를 저장한다.  </span>\n        member <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"member@naver.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token comment\">// 토픽을 저장한다.  </span>\n        topic <span class=\"token operator\">=</span> topicRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TopicFixture</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPublicAndAllMembersTopic</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token comment\">// 권한을 저장한다.  </span>\n        permission <span class=\"token operator\">=</span> permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Permission</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPermissionAssociatedWithTopicAndMember</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">// 영속성 컨텍스트 초기화 (초기화 안하면 findById 때 쿼리가 안 날라감)</span>\n        testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">permissionManyToOneFindById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Permission</span> permissionByFindById <span class=\"token operator\">=</span> permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permissionByFindById<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permissionByFindById<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 테스트 코드를 짜고, <code class=\"language-text\">@ManyToOne fetchType</code> 은 <code class=\"language-text\">Eager</code> (기본 설정) 로 설정하고 테스트를 진행했다.</p>\n<p>당연히 추가적인 <code class=\"language-text\">select</code> 쿼리가 날아가겠지? ㅎㅎ</p>\n<h3>예상과 다른 결과</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들\n    <span class=\"token keyword\">from</span>\n        permission p1_0 \n    <span class=\"token keyword\">join</span>\n        member m1_0 \n            <span class=\"token keyword\">on</span> m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>p1_0<span class=\"token punctuation\">.</span>member_id \n    <span class=\"token keyword\">join</span>\n        topic t1_0 \n            <span class=\"token keyword\">on</span> t1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>p1_0<span class=\"token punctuation\">.</span>topic_id \n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n        member c1_0 \n            <span class=\"token keyword\">on</span> c1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>t1_0<span class=\"token punctuation\">.</span>member_id \n    <span class=\"token keyword\">where</span>\n        p1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<p>아니 도대체 왜 ???</p>\n<p>예상대로라면 <code class=\"language-text\">select</code> 쿼리가 나가야 하는데...</p>\n<p>이해가 되지 않는다.</p>\n<p>왜 <code class=\"language-text\">select</code> 했다가 지 마음대로 <code class=\"language-text\">join</code> 해서 오는지 갈대같은 <code class=\"language-text\">JPA</code> 의 마음을 알 수가 없다.</p>\n<p>이 결과를 보고 이전과 다른게 뭐지... 하면서 곰곰히 생각해보았다.</p>\n<p>이 때 내가 발견한 차이점은 단 하나였다.</p>\n<h1>이전에는 목록 조회(findAll()), 이번에는 단건 조회(findById())이다.</h1>\n<h3>호다닥 findAll 로 테스트</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">permissionManyToOneFindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Permission</span><span class=\"token punctuation\">></span></span> permission <span class=\"token operator\">=</span> permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 테스트를 실행해보았다.</p>\n<p>결과는??</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n    <span class=\"token keyword\">insert</span> \n    <span class=\"token keyword\">into</span>\n        permission\n        <span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">,</span>member_id<span class=\"token punctuation\">,</span>topic_id<span class=\"token punctuation\">,</span>updated_at<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">values</span>\n        <span class=\"token punctuation\">(</span>?<span class=\"token punctuation\">,</span>?<span class=\"token punctuation\">,</span>?<span class=\"token punctuation\">,</span>?<span class=\"token punctuation\">,</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        permission p1_0\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        member m1_0 \n    <span class=\"token keyword\">where</span>\n        m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        topic t1_0 \n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n        member c1_0 \n            <span class=\"token keyword\">on</span> c1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>t1_0<span class=\"token punctuation\">.</span>member_id \n    <span class=\"token keyword\">where</span>\n        t1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<p>역시나 예상대로 <code class=\"language-text\">findAll</code> 인 경우는 똑같이 <code class=\"language-text\">Eager</code> 이더라도 <code class=\"language-text\">join</code> 을 해서 가져오지 않는다.</p>\n<p><code class=\"language-text\">Eager</code> 로 <code class=\"language-text\">findById</code>, <code class=\"language-text\">findAll</code> 을 테스트 해봤으니</p>\n<p><code class=\"language-text\">Lazy</code> 로 더 테스트를 진행해서 가설을 사실로 굳혀보자!</p>\n<h3>Lazy 테스트</h3>\n<p>먼저 <code class=\"language-text\">findById</code>로 테스트를 진행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">permissionManyToOneFindById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Permission</span> permissionByFindById <span class=\"token operator\">=</span> permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permissionByFindById<span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permissionByFindById<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        permission p1_0 \n    <span class=\"token keyword\">where</span>\n        p1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        topic t1_0 \n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n        member c1_0 \n            <span class=\"token keyword\">on</span> c1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>t1_0<span class=\"token punctuation\">.</span>member_id \n    <span class=\"token keyword\">where</span>\n        t1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<p>결과는 당연하다.</p>\n<p><code class=\"language-text\">Lazy</code> 하게 가져오니 <code class=\"language-text\">findById</code> 로 가져오더라도 <code class=\"language-text\">join</code> 을 하지 않은 것이고, <code class=\"language-text\">getTopic()</code> 을 할 때 <code class=\"language-text\">Topic</code> 을 가져왔기 때문에 <code class=\"language-text\">select</code> 쿼리가 나갔다.</p>\n<p>근데 <code class=\"language-text\">member</code> 를 조회하는 <code class=\"language-text\">select</code> 쿼리가 없다. </p>\n<p>왜 그럴까?</p>\n<p>이유는, 이번에 처음 알았는데 <code class=\"language-text\">assertJ</code> 로 테스트를 진행할 때 단 하나라도 예상한 결과가 나오지 않아 테스트가 실패하게 되면 그 즉시 테스트가 종료되는 것 같다.</p>\n<p>그래서 뒤에 있는 <code class=\"language-text\">getMember()</code> 구문은 실행되지 않은 것이다.</p>\n<p>어쨌든, 본론으로 돌아와 <code class=\"language-text\">findAll</code> 도 테스트를 진행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">permissionManyToOneFindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Permission</span><span class=\"token punctuation\">></span></span> permission <span class=\"token operator\">=</span> permissionRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTopic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 테스트를 진행했고, 나간 쿼리는 당연히 위와 동일할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        permission p1_0\nHibernate: \n    <span class=\"token keyword\">select</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">from</span>\n        topic t1_0 \n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n        member c1_0 \n            <span class=\"token keyword\">on</span> c1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>t1_0<span class=\"token punctuation\">.</span>member_id \n    <span class=\"token keyword\">where</span>\n        t1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n<p>역시 동일하다.</p>\n<h3>ManyToOne 테스트를 통해 확실하게 유추할 수 있는 것</h3>\n<p><code class=\"language-text\">findAll</code> 과 같은 목록 조회는 <code class=\"language-text\">Eager</code>, <code class=\"language-text\">Lazy</code> 가 정말 <code class=\"language-text\">select 시기</code>만을 결정하지만, <code class=\"language-text\">findById</code> 과 같은 단건 조회는 <code class=\"language-text\">Eager</code> 로 설정하게 되면, <code class=\"language-text\">fetchType</code> 이 <code class=\"language-text\">select 시기 결정</code>을 넘어 <code class=\"language-text\">join</code> 여부까지 결정할 수 있는 것이다. (최적화)</p>\n<p>결과야 뻔하긴 하지만, 남은 <code class=\"language-text\">OneToMany</code> 테스트들도 진행해서 위 사실을 더욱 더 굳혀보자.</p>\n<h2>OneToMany</h2>\n<h3>테스트 준비</h3>\n<p><code class=\"language-text\">ManyToOne</code> 테스트와 마찬가지로 <code class=\"language-text\">OneToMany</code> 테스트를 진행할 <code class=\"language-text\">대상 Entity</code> 와 <code class=\"language-text\">Test 코드</code>를 짜보자!</p>\n<ul>\n<li>\n<p>Member Entity (OneTOMany 컬럼만 있어서 딱 적합)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>  \n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Getter</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseTimeEntity</span> <span class=\"token punctuation\">{</span>  \n\n<span class=\"token annotation punctuation\">@Id</span>  \n<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 생략 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"creator\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topic</span><span class=\"token punctuation\">></span></span> createdTopics <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 생략 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Test 코드\n```java\n@Test  \nvoid memberOneToManyFindById() {  \n    Member memberByFindById = memberRepository.findById(member.getId()).get();  \n    assertThat(memberByFindById.getCreatedTopics().get(0)).isEqualTo(topic);  \n}  \n  \n@Test  \nvoid memberOneToManyFindAll() {  \n    List&lt;Member> members = memberRepository.findAll();  \n    assertThat(members.get(0).getCreatedTopics().get(0)).isEqualTo(topic);  \n}</code></pre></div>\n<h3>Eager 에 대해서 먼저 테스트 해보자!</h3>\n<ul>\n<li>\n<p>findById 로 테스트</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    member m1_0 \n<span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span>\n    topic c1_0 \n        <span class=\"token keyword\">on</span> m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>c1_0<span class=\"token punctuation\">.</span>member_id \n<span class=\"token keyword\">where</span>\n    m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n</ul>\n<p>이쯤되면 당연히 예상할 수 있듯이 <code class=\"language-text\">join</code> 을 해서 가져온다.</p>\n<ul>\n<li>\n<p>findAll 로 테스트</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    member m1_0\nHibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    topic c1_0 \n<span class=\"token keyword\">where</span>\n    c1_0<span class=\"token punctuation\">.</span>member_id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n</ul>\n<p>이것도 당연히 예상할 수 있듯, <code class=\"language-text\">join</code> 이 아닌 <code class=\"language-text\">select</code> 을 해서 가져오고, 실제로 <code class=\"language-text\">Topic</code> 에 <code class=\"language-text\">createdTopics</code> 에 접근하지 않더라도 <code class=\"language-text\">select</code> 구문이 발생하게 된다.</p>\n<p>왜 ? 지금까지 계속보았듯 <code class=\"language-text\">findAll</code> 과 같은 <code class=\"language-text\">목록 조회</code>에서는 <code class=\"language-text\">Eager</code>, <code class=\"language-text\">Lazy</code> 가 <code class=\"language-text\">select 시기</code>만을 결정하니까</p>\n<h3>Lazy 도 테스트 해보자.</h3>\n<p>정말 뻔하니 그냥 별다른 코멘트 없이 테스트 결과만을 나열하겠다.</p>\n<ul>\n<li>\n<p>findById</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    member m1_0 \n<span class=\"token keyword\">where</span>\n    m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?\nHibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    topic c1_0 \n<span class=\"token keyword\">where</span>\n    c1_0<span class=\"token punctuation\">.</span>member_id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n</ul>\n<p>당연히 <code class=\"language-text\">join</code> 하지 않고</p>\n<ul>\n<li>\n<p>findAll</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">Hibernate: \n<span class=\"token keyword\">select</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 수많은 컬럼들 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span>\n    member m1_0 \n<span class=\"token keyword\">where</span>\n    m1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>?</code></pre></div>\n</li>\n</ul>\n<p>당연히 조회하지 않는다면 더 이상 <code class=\"language-text\">select</code> 쿼리를 발생시키지 않는다.</p>\n<h2>최종적인 결론</h2>\n<ul>\n<li><code class=\"language-text\">findById</code> 는 <code class=\"language-text\">FetchType</code> 이 <code class=\"language-text\">Eager</code> 라면 <code class=\"language-text\">join</code> 을 해서 가져와준다 (최적화를 알아서 해주는 것)</li>\n<li><code class=\"language-text\">findAll</code> 은 <code class=\"language-text\">findById</code> 와 다르게 <code class=\"language-text\">fetch type</code> 이 <code class=\"language-text\">Eager</code> 인지 <code class=\"language-text\">Lazy</code> 인지에 따라 해당 데이터를 가져오기 위한 <code class=\"language-text\">select 쿼리 발생 시기</code>만을 결정한다. (즉, <code class=\"language-text\">fetch type</code> 으로 인해 <code class=\"language-text\">join 여부</code>가 결정되지 않음)</li>\n</ul>","frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!","date":"October 04, 2023","update":"October 04, 2023","tags":["Spring Data JPA","JPQL"],"series":null},"fields":{"slug":"/trouble-shooting-fetch-type/","readingTime":{"minutes":13.525}}},"seriesList":{"edges":[{"node":{"id":"9e6463d2-18de-5fdf-b4e6-8707709710e1","fields":{"slug":"/how-to-write-a-post/"},"frontmatter":{"title":"포스트 작성 방법"}}},{"node":{"id":"b802f2fe-d332-504c-be84-fd7aa170c622","fields":{"slug":"/github-actions-ci-cd/"},"frontmatter":{"title":"GitHub Actions로 CI/CD 구축하기"}}},{"node":{"id":"45b7dc00-ae71-58e4-9dc2-7aff92f0ca0d","fields":{"slug":"/trouble-shooting-actions-runner/"},"frontmatter":{"title":"EC2 환경 변수 적용 및 Actions Runner에 환경 변수 적용이 안되는 이슈"}}},{"node":{"id":"cb221d09-1977-59c9-9bc3-cd607a15d292","fields":{"slug":"/how-to-isolating-test/"},"frontmatter":{"title":"인수테스트에서 테스트 격리하기!"}}},{"node":{"id":"fa602b8b-64fa-59b0-b377-089612f91d9f","fields":{"slug":"/how-to-use-nginx/"},"frontmatter":{"title":"괜찮을지도의 Nginx 활용법"}}},{"node":{"id":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","fields":{"slug":"/trouble-shooting-modifying-annotation/"},"frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제"}}},{"node":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","fields":{"slug":"/trouble-shooting-fetch-type/"},"frontmatter":{"title":"FetchType.EAGER, FetchType.LAZY 에 대해서 알아보자!"}}},{"node":{"id":"2b3c31ce-d59e-50a0-92b2-7dc228aacf29","fields":{"slug":"/jpa-multibag-fetch-exception/"},"frontmatter":{"title":"Fetch join 사용 시 MultipleBagFetchException의 발생 이유와 해결 방법"}}},{"node":{"id":"253d110b-e241-549e-923a-f26782aab2dc","fields":{"slug":"/how-to-hikariCP/"},"frontmatter":{"title":"HikariCP 적용기"}}},{"node":{"id":"50f61fc3-c2e2-5599-b7e8-64879a64275d","fields":{"slug":"/trouble-shooting-jpa-delete-and-persistence/"},"frontmatter":{"title":"JPA 엔티티를 삭제할 때 영속성과 연관 관계가 중요한 이유"}}},{"node":{"id":"17b8f808-e28d-5eb8-a407-fba6191a1ea7","fields":{"slug":"/how-to-store-image-s3/"},"frontmatter":{"title":"백엔드와 협력해 S3에 이미지 저장하기"}}}]},"previous":{"fields":{"slug":"/trouble-shooting-modifying-annotation/"},"frontmatter":{"title":"@Modifying 어노테이션의 옵션이 정상 동작하지 않는 문제"}},"next":{"fields":{"slug":"/jpa-multibag-fetch-exception/"},"frontmatter":{"title":"Fetch join 사용 시 MultipleBagFetchException의 발생 이유와 해결 방법"}}},"pageContext":{"id":"db91695e-5bf6-554c-bafd-e161d686fadf","series":null,"previousPostId":"89dc33ed-1ad0-5d79-8148-b1a16f417a71","nextPostId":"2b3c31ce-d59e-50a0-92b2-7dc228aacf29"}},"staticQueryHashes":[],"slicesMap":{}}